import java.awt.*;
import java.awt.geom.*;

/**
 * A circle that can be manipulated and that draws itself on a canvas.
 * 
 * @author  Michael Kolling and David J. Barnes
 * @version 1.0.  (15 July 2000) 
 */

public class Circle{

    public static final double PI=3.1416;
    
    private int diameter;
    private int xPosition;
    private int yPosition;
    private String color;
    private boolean isVisible;
    

    public Circle(){
        diameter = 30;
        xPosition = 20;
        yPosition = 15;
        color = "blue";
        isVisible = false;
    }

    public Circle(double areaDeseada) {
        diameter = (int) Math.round(2 * Math.sqrt(areaDeseada / PI));
        xPosition = 20;
        yPosition = 15;
        color = "red";
        isVisible = false;
    }

       
    public void makeVisible(){
        isVisible = true;
        draw();
    }
    

    public void makeInvisible(){
        erase();
        isVisible = false;
    }

    private void draw(){
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.draw(this, color, 
                new Ellipse2D.Double(xPosition, yPosition, 
                diameter, diameter));
            canvas.wait(10);
        }
    }

    private void erase(){
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.erase(this);
        }
    }
    
    /**
     * Move the circle a few pixels to the right.
     */
    public void moveRight(){
        moveHorizontal(20);
    }

    /**
     * Move the circle a few pixels to the left.
     */
    public void moveLeft(){
        moveHorizontal(-20);
    }

    /**
     * Move the circle a few pixels up.
     */
    public void moveUp(){
        moveVertical(-20);
    }

    /**
     * Move the circle a few pixels down.
     */
    public void moveDown(){
        moveVertical(20);
    }

    /**
     * Move the circle horizontally.
     * @param distance the desired distance in pixels
     */
    public void moveHorizontal(int distance){
        erase();
        xPosition += distance;
        draw();
    }

    /**
     * Move the circle vertically.
     * @param distance the desired distance in pixels
     */
    public void moveVertical(int distance){
        erase();
        yPosition += distance;
        draw();
    }

    /**
     * Slowly move the circle horizontally.
     * @param distance the desired distance in pixels
     */
    public void slowMoveHorizontal(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        } else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            xPosition += delta;
            draw();
        }
    }

    /**
     * Slowly move the circle vertically
     * @param distance the desired distance in pixels
     */
    public void slowMoveVertical(int distance){
        int delta;

        if(distance < 0) {
            delta = -1;
            distance = -distance;
        }else {
            delta = 1;
        }

        for(int i = 0; i < distance; i++){
            yPosition += delta;
            draw();
        }
    }

    /**
     * Change the size.
     * @param newDiameter the new size (in pixels). Size must be >=0.
     */
    public void changeSize(int newDiameter){
        erase();
        diameter = newDiameter;
        draw();
    }

    /**
     * Change the color. 
     * @param color the new color. Valid colors are "red", "yellow", "blue", "green",
     * "magenta" and "black".
     */
    public void changeColor(String newColor){
        color = newColor;
        draw();
    }

    /**
     * Calculate the area of the circle.
     */
    public double area() {
        double radio = diameter / 2.0;
        return PI * radio * radio;
    }

    /**
     * Increase the area of the circle by a percentage [0..100]
     * @param Percentage: percentage increase of the area (0–100).
     */
    public void bigger(int percentage) {
        if (percentage < 0 || percentage > 100) {
            System.out.println("Porcentaje inválido (0-100).");
            return;
        }
        double factor = Math.sqrt(1 + (percentage / 100.0));
        int newDiameter = (int) Math.round(diameter * factor);
        changeSize(newDiameter);
    }

    /**
     * Decrease its size times times, until reaching an area less than or equal to area
     * @param times maximum number of reductions. 
     * @param param minArea target minimum area
     */
    public void shrink(int times, int minArea) {
        for (int i = 0; i < times; i++) {
            if (area() <= minArea) {
                break;
            }
            int newDiameter = (int) Math.round(diameter * 0.7);
            if (newDiameter <= 0) newDiameter = 1;
            changeSize(newDiameter);
        }
    }

    /**
     * Makes the circle increase and decrease its size like heartbeats the specified number of times.
     * @param times number of pulses
     */
    public void pulse(int times) {
        for (int i = 0; i < times; i++) {
            changeSize(diameter + 10);
            for (int j = 0; j < 100; j++) {
                draw();
            }
            changeSize(diameter - 10);
                for (int j = 0; j < 100; j++) {
                draw();
            }
        }
    }
    
    /**
     * Devuelve la posición actual en el eje X del objeto.
     *
     * @return un valor entero que representa la coordenada X (horizontal).
     */
    public int getX() {
        return xPosition;
    }
    
    /**
     * Devuelve la posición actual en el eje Y del objeto.
     *
     * @return un valor entero que representa la coordenada Y (vertical).
     */
    public int getY() {
        return yPosition;
    }

}
