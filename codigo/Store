import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Representa una tienda en el tablero de SilkRoad.
 * Cada tienda ocupa una celda en la espiral y contiene una cantidad de tenges.
 */
public class Store {
    private int location;
    private int tenges;
    private int initialTenges;   // Nuevo: guardar el valor inicial
    private int emptiedCount;    // Contador de veces vaciada
    private boolean visible;

    private List<Rectangle> rects = new ArrayList<>();
    private List<Circle> circles = new ArrayList<>();

    private static final int CELL_SIZE = 25;

    private static final List<String> COLORS = Arrays.asList(
        "black", "red", "blue", "green", "yellow", "cyan", "gray"
    );
    private static int colorIndex = 0;

    private String color;

    /**
     * Crea una nueva tienda en una ubicaci√≥n espec√≠fica con un n√∫mero inicial de tenges.
     *
     * @param location posici√≥n de la tienda en la espiral
     * @param tenges   cantidad inicial de tenges de la tienda
     */
    public Store(int location, int tenges) {
        this.location = location;
        this.tenges = tenges;
        this.initialTenges = tenges;  // guardar valor inicial
        this.emptiedCount = 0;
        this.visible = false;
        this.color = COLORS.get(colorIndex % COLORS.size());
        colorIndex++;
        JOptionPane.showMessageDialog(null, "üè™ Tienda creada en " + location + " con " + tenges + " tenges.");
    }

    /** Devuelve la ubicaci√≥n actual de la tienda. */
    public int getLocation() { return location; }

    /** Devuelve la cantidad de tenges almacenados en la tienda. */
    public int getTenges() { return tenges; }
    
    /*** Devuelve la ganancia total que ha entregado esta tienda (veces vaciada √ó valor inicial).
    */
    public int getTotalGiven() {
    return emptiedCount * initialTenges;
    }


    /** Restaura la tienda a su valor inicial de tenges. */
    public void resupply() {
        this.tenges = initialTenges;
        if (visible) {
            makeInvisible();
            makeVisible();
        }
        JOptionPane.showMessageDialog(null, "üîÑ Tienda en " + location + " reabastecida con " + initialTenges + " tenges.");
    }

    /** Vac√≠a la tienda, dejando los tenges en 0. */
    public void vaciar() {
        this.tenges = 0;
        emptiedCount++;
        if (visible) {
            makeInvisible();
            makeVisible();
        }
        JOptionPane.showMessageDialog(null, "‚ö† Tienda en " + location + " vaciada. Total veces vaciada: " + emptiedCount);
    }

    /** Devuelve el n√∫mero de veces que la tienda ha sido vaciada. */
    public int getEmptiedCount() { return emptiedCount; }

    /** Dibuja la tienda en el tablero si a√∫n no est√° visible. */
    public void makeVisible() {
        if (!visible) {
            if (tenges == 0) {
                makeEmptyVisual();
            } else {
                dibujarTienda();
            }
            visible = true;
        }
    }

    /** Oculta la tienda y borra sus elementos gr√°ficos. */
    public void makeInvisible() {
        for (Rectangle rect : rects) rect.makeInvisible();
        for (Circle circ : circles) circ.makeInvisible();
        rects.clear();
        circles.clear();
        visible = false;
    }

    /** Construye visualmente la tienda dentro de la celda correspondiente. */
    private void dibujarTienda() {
        SpiralRoad spiral = SpiralRoad.getInstance();
        int[] coordenada = spiral.getCeldaPorUbicacion(location);

        if (coordenada != null) {
            int x = coordenada[0];
            int y = coordenada[1];
            int offsetX = x * CELL_SIZE - 138;
            int offsetY = y * CELL_SIZE - 135;

            crearRectangulo(11, 15, offsetX + 142, offsetY + 145, "black");
            crearRectangulo(9, 13, offsetX + 143, offsetY + 146, "white");
            crearRectangulo(2, 4, offsetX + 144, offsetY + 148, "blue");

            crearCirculo(5, offsetX + 145, offsetY + 140, "red");
            crearCirculo(5, offsetX + 140, offsetY + 140, "green");
            crearCirculo(5, offsetX + 150, offsetY + 140, "green");
            crearCirculo(5, offsetX + 155, offsetY + 140, "red");

            crearRectangulo(6, 4, offsetX + 155, offsetY + 134, "red");
            crearRectangulo(6, 4, offsetX + 145, offsetY + 134, "red");
            crearRectangulo(6, 4, offsetX + 140, offsetY + 134, "green");
            crearRectangulo(6, 4, offsetX + 150, offsetY + 134, "green");

            crearRectangulo(5, 19, offsetX + 140, offsetY + 133, color);
            crearRectangulo(3, 17, offsetX + 141, offsetY + 134, "white");

            crearRectangulo(7, 5, offsetX + 150, offsetY + 149, color);
            crearRectangulo(5, 3, offsetX + 151, offsetY + 150, "white");
        }
    }

    private Rectangle crearRectangulo(int height, int width, int x, int y, String color) {
        Rectangle r = new Rectangle();
        r.changeSize(height, width);
        r.changeColor(color);
        r.moveHorizontal(x - r.getX());
        r.moveVertical(y - r.getY());
        r.makeVisible();
        rects.add(r);
        return r;
    }

    private Circle crearCirculo(int diameter, int x, int y, String color) {
        Circle c = new Circle();
        c.changeSize(diameter);
        c.changeColor(color);
        c.moveHorizontal(x - c.getX());
        c.moveVertical(y - c.getY());
        c.makeVisible();
        circles.add(c);
        return c;
    }

    /** Visual alternativo para cuando la tienda est√° vac√≠a (diferente dise√±o). */
    public void makeEmptyVisual() {
        makeInvisible(); 
        SpiralRoad spiral = SpiralRoad.getInstance();
        int[] coordenada = spiral.getCeldaPorUbicacion(location);

        if (coordenada != null) {
            int x = coordenada[0];
            int y = coordenada[1];
            int offsetX = x * CELL_SIZE - 138;
            int offsetY = y * CELL_SIZE - 135;

            crearRectangulo(11, 15, offsetX + 142, offsetY + 145, "white");
            crearRectangulo(9, 13, offsetX + 143, offsetY + 146, color);
            crearRectangulo(2, 4, offsetX + 144, offsetY + 148, "white");

            crearCirculo(5, offsetX + 145, offsetY + 140, "white");
            crearCirculo(5, offsetX + 140, offsetY + 140, "white");
            crearCirculo(5, offsetX + 150, offsetY + 140, "white");
            crearCirculo(5, offsetX + 155, offsetY + 140, "white");

            crearRectangulo(6, 4, offsetX + 155, offsetY + 134, "white");
            crearRectangulo(6, 4, offsetX + 145, offsetY + 134, "white");
            crearRectangulo(6, 4, offsetX + 140, offsetY + 134, "white");
            crearRectangulo(6, 4, offsetX + 150, offsetY + 134, "white");

            crearRectangulo(5, 19, offsetX + 140, offsetY + 133, "white");
            crearRectangulo(3, 17, offsetX + 141, offsetY + 134, color);

            crearRectangulo(7, 5, offsetX + 150, offsetY + 149, "white");
            crearRectangulo(5, 3, offsetX + 151, offsetY + 150, color);
        }
    }
}
